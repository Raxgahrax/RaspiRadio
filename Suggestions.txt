1. Une fonction d'alarme.
Je pense que la fonction primordiale qui manque au projet initial est une fonction réveil, concernant le réglage il faut se référer au montage que j'ai réalisé (réveil.png) mais je ne sais pas exactement comment cette donnée pourrait être enregistrer et vérifier toutes les minutes (peut être un cron) ; il serait également intéressant de lier la fonction « réveil » à l'une des stations enregistrées dans le listing (radio_playlist.sh) pour pouvoir être réveiler en musique (si par hasard le réveil fonctionne en wifi, l'interface wifi devra être activer par un script  10 minutes avant la sonnerie). L'icône d'alarme se trouvera en bas à droite de l'écran principal (celui affichant l'heure et la date): 0x0,0xe, 0x15,0x17,0x11,0xe, 0x0

2. Éteindre le rétro-éclairage
Pour des raisons d'économie d'énergie, il serait avantageux d'amorcer une désactivation programmée du rétro-éclairage de l'écran vers minuit et une réactivation vers 8 heures du matin ou plus tôt si la fonction de réveil a été activée.

3. Affichage de l'heure et de la date par défaut
Pour que le projet final ressemble à un « vrai » radio-réveil, il serait préférable d'afficher l'heure et la date par défaut sur l'écran. L'adresse IP pourra être affichée en suivant le menu des réglages. Dès le branchement électrique, l'heure et la date sera affichée par défaut et une mise à jour automatique sera réalisée à l'aide de la fonction « ntp ».

4. Affichage de la température et de l'humidité.
En utilisant le menu de base dans le script python (radio_new.py), il serait possible de voir la température et l'humidité dans la pièce à l'aide d'une sonde DHT 22 (température intérieur de la pièce ou extérieur si la sonde est branchée à une ralonge). Le bouton "gauche" aura pour fonction de revenir au menu des choix.

5. Utilisation d'un module RTC
Pour garder l'horloge à l'heure si une panne du réseau Internet devait se produire, il serait intéressant de synchroniser périodiquement l'heure Internet sur un module RTC (hwclock --systohc --localtime), puis de copier ces données dans le bios du raspberry (hwclock --hctosys).

--------

1. An alarm function.
I think that the primary function that is missing from the initial project is a wake-up function, regarding the setting you need to refer to the editing that I realized (awaken.png) but I do not know exactly how this data could be recorded and check all Minutes (may be a cron); It would also be interesting to link the "wake-up" function to one of the stations recorded in the listing (radio_playlist.sh) in order to be able to wake up to music (if by chance the alarm clock works in wifi, the wifi interface must be activated by A script 10 minutes before the ringing). The alarm icon will be located at the bottom right of the main screen (the one showing the time and date): 0x0,0xe, 0x15,0x17,0x11,0xe, 0x0

2. Turn off the backlight
For reasons of energy saving, it would be advantageous to initiate a programmed deactivation of the backlight of the screen towards midnight and a reactivation towards 8 o'clock in the morning or sooner if the wake-up function has been activated.

3. Display of the default time and date
For the final project to resemble a "real" radio alarm clock, it would be best to display the default time and date on the screen. The IP address can be displayed by following the settings menu. As soon as the electrical connection is made, the time and date will be displayed by default and an automatic update will be carried out using the "ntp" function.

4. Display of temperature and humidity.
Using the basic menu in the python script (radio_new.py), it would be possible to see the temperature and humidity in the room using a DHT 22 probe (indoor or outdoor temperature if Probe is plugged into an extension). The "left" button will return to the selection menu.

5. Using an RTC Module
To keep the clock on time should an Internet network outage occur, it would be interesting to periodically synchronize the Internet time on a RTC module (hwclock --systohc --localtime) and then copy that data into the Raspberry bios (hwclock --hctosys).
